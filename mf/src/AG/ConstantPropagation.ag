module{AG.ConstantPropagation}{}{}

{
import AG.AttributeGrammar
import qualified Data.Map as M
}

include "AttributeGrammar.ag"

{
type CPData = Maybe (M.Map String Int)
type Info = M.Map Int (CPData -> CPData)
}

attr Program' Proc' Stat'
    syn update use {`M.union`} {M.empty} :: Info

attr IExpr
    -- Using inh here doesn't work, because the value passed is only determined
    -- once the tree has been broken down, and so we don't have anything to
    -- pass within the grammar itself.
    syn value :: {M.Map String Int -> Maybe Int}

-- We only do constant propagation for integer values.  We could fairly easily
-- also implement boolean vlues, but it would involve a whole lot of branching
-- and would not add much to the exercise.
sem Stat'
    | IAssign'      lhs.update = M.singleton @label $ fmap $ \m -> M.alter (const $ @val.value m) @name m

sem IExpr
    | IConst        lhs.value  = const $ Just @val
    | Var           lhs.value  = M.lookup @name
    | Plus          lhs.value  = \m -> (+) <$> @left.value m <*> @right.value m
    | Minus         lhs.value  = \m -> (-) <$> @left.value m <*> @right.value m
    | Times         lhs.value  = \m -> (*) <$> @left.value m <*> @right.value m
    | Divide        lhs.value  = \m -> div <$> @left.value m <*> @right.value m
