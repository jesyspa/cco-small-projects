module{AG.PropertyCatas}{}{}

{
import Prelude hiding (init)
import AG.AttributeGrammar
import qualified Data.Set as S
import qualified Data.Map as M
}

include "AttributeGrammar.ag"

attr Program' Proc' Stat'
    syn     init :: {Int}
    syn     final use {++} {error "undefined finals"} :: {[Int]}

attr Program' Procs'
    syn     bodies use {`M.union`} {M.empty} :: {M.Map Int [(Int, Int)]}

-- plabels and plabels' are used to figure out flow when it comes to calls.
-- The list of procedure definitions generates plabels, which we then pass
-- back into the procedures and statements using plabels'.
attr Procs' Proc'
    syn     plabels use {`M.union`} {M.empty} :: {M.Map String (Int, Int)}

attr Procs' Proc' Stat'
    inh     plabels' :: {M.Map String (Int, Int)}

attr Program' Procs' Proc' Stat'
    syn     flow use {++} {[]} :: {[(Int, Int)]}
    syn     interFlow use {++} {[]} :: {[((Int, Int), (Int, Int))]}
    syn     labels use {++} {[]} :: {[Int]}

attr Program' Proc' Procs' Stat' IExpr BExpr Exprs Expr
    syn     names use {`S.union`} {S.empty} :: {S.Set String}
    syn     copy :: self

attr Stat'
    syn     breaks use {++} {[]} :: {[Int]}
    syn     continues use {++} {[]} :: {[Int]}

sem Program'
  | Program'      lhs  .init     = @stat.init
                  lhs  .final    = @stat.final
                  stat .plabels' = @procs.plabels
                  procs.plabels' = @procs.plabels
                       +bodies   = M.insert @stat.init @stat.flow

sem Procs'
  | Cons               +bodies   = M.insert @hd.init @hd.flow

sem Proc'
  | Proc'         lhs.init       = @labelEntry
                  lhs.final      = [@labelReturn]
                     +labels     = (++) [@labelEntry, @labelReturn]
                     +flow       = (++) $ [(@labelEntry, @stat.init)] ++ [(l, @labelReturn) | l <- @stat.final]
                  lhs.plabels    = M.singleton @name (@labelEntry, @labelReturn)

sem Stat'
  | Skip' IAssign' BAssign' Continue' Break' Malloc' Free' RefAssign'
                  lhs.init       = @label
                  lhs.labels     = [@label]
  | Skip' IAssign' BAssign' Malloc' Free' RefAssign'
                  lhs.final      = [@label]
  | IAssign' BAssign'
                  lhs.names      = S.singleton @name
  | IfThenElse' While'
                  lhs.init       = @labelc
                     +labels     = (:) @labelc
  | IfThenElse'      +flow       = (++) [(@labelc, @stat1.init), (@labelc, @stat2.init)]
  | While'        lhs.final      = [@labelc] ++ @stat.breaks
                     +flow       = (++) $ [(@labelc, @stat.init)] ++ [(x, @labelc) | x <- @stat.final] ++ [(x, @labelc) | x <- @stat.breaks]
                  lhs.breaks     = []
                  lhs.continues  = []
  | Seq'             +flow       = (++) [(x, @stat2.init) | x <- @stat1.final]
                  lhs.final      = @stat2.final
                  lhs.init       = @stat1.init
  | Call'         lhs.init       = @labelCall
                  lhs.final      = [@labelExit]
                  lhs.labels     = [@labelCall, @labelExit]
                  loc.funLabels  = @lhs.plabels' M.! @name
                  lhs.flow       = [(@labelCall, fst @loc.funLabels), (snd @loc.funLabels, @labelExit)]
                  lhs.interFlow  = [((@labelCall, fst @loc.funLabels), (snd @loc.funLabels, @labelExit))]
  | Break'        lhs.breaks     = [@label]
                  lhs.final      = []
  | Continue'     lhs.continues  = [@label]
                  lhs.final      = []

sem IExpr
  | Var           lhs.names      = S.singleton @name

sem BExpr
  | BVar          lhs.names      = S.singleton @name


{
-- | Compute the properties and wrap them in an easy-to-access struct.
run s = wrap_Program' (sem_Program' s) Inh_Program'

-- I was sorely tempted to use Template Haskell for this bit, but I thought
-- your day might be bad enough without that.

-- | Get the first label to be executed.
init :: Program' -> Int
init = init_Syn_Program' . run

-- | Get the possible labels at which computation can terminate.
final :: Program' -> [Int]
final = final_Syn_Program' . run

-- | Get a list of all labels.
labels :: Program' -> [Int]
labels = labels_Syn_Program' . run

-- | Get a list of all transitions.
flow :: Program' -> [(Int, Int)]
flow = flow_Syn_Program' . run

-- | Get a list of all transitions, backwards.
flowR :: Program' -> [(Int, Int)]
flowR = map (uncurry $ flip (,)) . flow

-- | Get all possible procedure calls and returns.
--
-- The book uses four-tuples here, but it is more convenient to work with
-- tuples of tuples in Haskell.
interFlow :: Program' -> [((Int, Int), (Int, Int))]
interFlow = interFlow_Syn_Program' . run

-- | Get a map from the entry point of a function to all the flow in its body.
bodies :: Program' -> M.Map Int [(Int, Int)]
bodies = bodies_Syn_Program' . run

-- | Get a list of all variable names used in the program.
names :: Program' -> S.Set String
names = names_Syn_Program' . run

}
