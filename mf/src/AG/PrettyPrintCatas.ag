module{AG.PrettyPrintCatas}{}{}

{
import Prelude hiding (init)
import AG.AttributeGrammar
import qualified Data.Set as S
import Text.PrettyPrint
}

include "AttributeGrammar.ag"

{
data PrecedenceS = None
                 | Compound
                 deriving(Eq, Ord, Read, Show)

data PrecedenceE = Atomic
                 deriving(Eq, Ord, Read, Show)

}

attr Stat'
    inh     prec :: {PrecedenceS}

attr Program' Proc' Stat' IExpr BExpr Expr
    syn     doc :: {Doc}

attr Procs' Exprs
    syn     doc use {:} {[]} :: {[Doc]}

sem Program'
  | Program'        lhs  .doc  = text "begin" $$ nest 4 (vcat @procs.doc $$ @stat.doc) $$ text "end"
                    stat .prec = None

sem Proc'
  | Proc'           lhs  .doc  = text "proc" <+> wrapWithPair (@labelEntry, @labelReturn) (text @name <> parens @loc.args) <+> text "is" $$ nest 4 @stat.doc $$ text "end"
                    loc  .args = hsep (map (\x -> text "val" <+> text x <> comma) @inp) <+> text "res" <+> text @out
                    stat .prec = None

sem Stat'
  | Skip'           lhs  .doc  = wrapWithLabel @label $ text "skip" <+> semi
  | IfThenElse'     lhs  .doc  = text "if" <+> wrapWithLabel @labelc @cond.doc $$ text "then" <+> @stat1.doc $$ text "else" <+> @stat2.doc
                    stat1.prec = Compound
                    stat2.prec = Compound
  | While'          lhs  .doc  = text "while" <+> wrapWithLabel @labelc @cond.doc $$ text "do" <+> @stat.doc
                    stat .prec = Compound
  | Call'           lhs  .doc  = wrapWithPair (@labelCall, @labelExit) $ text "call" <+> text @name <> parens @loc.args
                    loc  .args = hsep (map (<> comma) @params.doc) <+> text @out
  | IAssign' BAssign'
                    lhs  .doc  = wrapWithLabel @label $ text @name <+> assign <+> @val.doc <+> semi
  | Seq'            lhs  .doc  = maybeParens (@lhs.prec >= Compound) $ @stat1.doc $$ @stat2.doc
                    stat1.prec = None
                    stat2.prec = None
  | Continue'       lhs  .doc  = wrapWithLabel @label $ text "continue" <+> semi
  | Break'          lhs  .doc  = wrapWithLabel @label $ text "break" <+> semi

sem IExpr
  | IConst          lhs  .doc  = int @val
  | Var             lhs  .doc  = text @name
  | Plus            lhs  .doc  = @left.doc <+> char '+' <+> @right.doc
  | Minus           lhs  .doc  = @left.doc <+> char '-' <+> @right.doc
  | Times           lhs  .doc  = @left.doc <+> char '*' <+> @right.doc
  | Divide          lhs  .doc  = @left.doc <+> char '/' <+> @right.doc

sem BExpr
  | BConst          lhs  .doc  = text $ if @val then "true" else "false"
  | BVar            lhs  .doc  = text @name
  | LessThan        lhs  .doc  = @left.doc <+> char '<' <+> @right.doc
  | GreaterThan     lhs  .doc  = @left.doc <+> char '>' <+> @right.doc
  | LessEqual       lhs  .doc  = @left.doc <+> text "<=" <+> @right.doc
  | GreaterEqual    lhs  .doc  = @left.doc <+> text ">=" <+> @right.doc
  | IEqual BEqual   lhs  .doc  = @left.doc <+> text "==" <+> @right.doc
  | And             lhs  .doc  = @left.doc <+> text "&&" <+> @right.doc
  | Or              lhs  .doc  = @left.doc <+> text "||" <+> @right.doc
  | Not             lhs  .doc  = text "!" <+> @val.doc

sem Expr
  | B               lhs  .doc  = @bExpr.doc
  | I               lhs  .doc  = @iExpr.doc


{
-- | An assignment symbol
assign :: Doc
assign = text ":="

-- | Wrap a document in brackets, adding a label.
wrapWithLabel :: Int -> Doc -> Doc
wrapWithLabel i d = brackets d <+> int i

-- | Wrap a document in brackets, adding a label pair.
wrapWithPair :: (Int, Int) -> Doc -> Doc
wrapWithPair (l, l') d = brackets d <+> parens (int l <> comma <+> int l')

-- | Add parentheses if true.
maybeParens :: Bool -> Doc -> Doc
maybeParens True  = parens
maybeParens False = id

-- | Pretty print a labelled statement.
ppStat' :: Stat' -> Doc
ppStat' stat = sem_Stat' stat None

-- | Pretty print a labelled program.
ppProgram' :: Program' -> Doc
ppProgram' = sem_Program'
}
