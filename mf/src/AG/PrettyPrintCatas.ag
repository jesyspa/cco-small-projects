module{AG.PrettyPrintCatas}{}{}

{
import Prelude hiding (init)
import AG.AttributeGrammar
import qualified Data.Set as S
import Text.PrettyPrint
}

include "AttributeGrammar.ag"

{
data PrecedenceS = None
                 | Compound
                 deriving(Eq, Ord, Read, Show)

data PrecedenceE = Atomic
                 deriving(Eq, Ord, Read, Show)

}

attr Stat'
    inh     prec :: {PrecedenceS}

attr Stat' IExpr BExpr Expr
    syn     doc :: {Doc}

attr Exprs
    syn     docs use {:} {[]} :: {[Doc]}

sem Stat'
  | Skip'           lhs  .doc  = wrapWithLabel @label $ text "skip"
  | IfThenElse'     lhs  .doc  = text "if" <+> wrapWithLabel @labelc @cond.doc <+> text "then" <+> @stat1.doc <+> text "else" <+> @stat2.doc
                    stat1.prec = Compound
                    stat2.prec = Compound
  | While'          lhs  .doc  = text "while" <+> wrapWithLabel @labelc @cond.doc <+> text "do" <+> @stat.doc
                    stat .prec = Compound
  | Call'           lhs  .doc  = text "<TODO:call>"
  | IAssign' BAssign'
                    lhs  .doc  = wrapWithLabel @label $ text @name <+> assign <+> @val.doc
  | Seq'            lhs  .doc  = @stat1.doc <+> semi <+> @stat2.doc
  | Malloc'         lhs  .doc  = undefined
  | Free'           lhs  .doc  = undefined
  | RefAssign'      lhs  .doc  = undefined
  | Continue'       lhs  .doc  = wrapWithLabel @label $ text "continue"
  | Break'          lhs  .doc  = wrapWithLabel @label $ text "break"

sem IExpr
  | IConst          lhs  .doc  = int @val
  | Var             lhs  .doc  = text @name
  | Plus            lhs  .doc  = @left.doc <+> char '+' <+> @right.doc
  | Minus           lhs  .doc  = @left.doc <+> char '-' <+> @right.doc
  | Times           lhs  .doc  = @left.doc <+> char '*' <+> @right.doc
  | Divide          lhs  .doc  = @left.doc <+> char '/' <+> @right.doc
  | Deref           lhs  .doc  = char '*' <> @ptr.doc

sem BExpr
  | BConst          lhs  .doc  = text $ if @val then "true" else "false"
  | BVar            lhs  .doc  = text @name
  | LessThan        lhs  .doc  = @left.doc <+> char '<' <+> @right.doc
  | GreaterThan     lhs  .doc  = @left.doc <+> char '>' <+> @right.doc
  | LessEqual       lhs  .doc  = @left.doc <+> text "<=" <+> @right.doc
  | GreaterEqual    lhs  .doc  = @left.doc <+> text ">=" <+> @right.doc
  | IEqual BEqual   lhs  .doc  = @left.doc <+> text "==" <+> @right.doc
  | And             lhs  .doc  = @left.doc <+> text "&&" <+> @right.doc
  | Or              lhs  .doc  = @left.doc <+> text "||" <+> @right.doc
  | Not             lhs  .doc  = text "!" <+> @val.doc

sem Expr
  | B               lhs  .doc  = @bExpr.doc
  | I               lhs  .doc  = @iExpr.doc


{
assign :: Doc
assign = text ":="

wrapWithLabel :: Int -> Doc -> Doc
wrapWithLabel i d = brackets d <+> int i

ppStat' :: Stat' -> Doc
ppStat' s = doc_Syn_Stat' $ wrap_Stat' (sem_Stat' s) (Inh_Stat' None)
}
