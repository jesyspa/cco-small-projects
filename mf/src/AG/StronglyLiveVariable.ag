module{AG.StronglyLiveVariable}{}{}

{
import AG.AttributeGrammar
import qualified Data.Map as M
import qualified Data.Set as S
}

include "AttributeGrammar.ag"

{
type SLVData = S.Set String
type Info = M.Map Int (SLVData -> SLVData)
}

attr Program' Procs' Proc' Stat'
    syn update use {`M.union`} {M.empty} :: Info

attr IExpr BExpr
    syn uses use {`S.union`} {S.empty} :: {SLVData}


sem Stat'
    | IfThenElse' While'
                       +update = M.insert @labelc (S.union @cond.uses)
    -- This is the kind of case we wanted the Composite update form for,
    -- but never got around to actually using it.
    | IAssign' BAssign'
                    lhs.update = M.singleton @label $ \s -> if @name `S.member` s then S.delete @name s `S.union` @val.uses else s

sem IExpr
    | Var           lhs.uses   = S.singleton @name

sem BExpr
    | BVar          lhs.uses   = S.singleton @name
