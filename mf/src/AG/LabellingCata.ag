module{AG.LabellingCata}{}{}

{
import AG.AttributeGrammar
}

include "AttributeGrammar.ag"

attr Stat
    chn counter :: {Int}
    syn labelled :: {Stat'}

sem Stat
      | Skip
            loc.fresh :: uniqueref counter
            lhs.labelled = Skip' @loc.fresh

      | IfThenElse
            loc.fresh :: uniqueref counter
            lhs.labelled = IfThenElse' @loc.fresh @cond @stat1.labelled @stat2.labelled

      | While
            loc.fresh :: uniqueref counter
            lhs.labelled = While' @loc.fresh @cond @stat.labelled

      | Call
            loc.freshEntry :: uniqueref counter
            loc.freshExit :: uniqueref counter
            lhs.labelled = Call' @loc.freshEntry @loc.freshExit @name @params @out

      | IAssign
            loc.fresh :: uniqueref counter
            lhs.labelled = IAssign' @loc.fresh @name @val

      | BAssign
            loc.fresh :: uniqueref counter
            lhs.labelled = BAssign' @loc.fresh @name @val

      | Seq
            loc.fresh :: uniqueref counter
            lhs.labelled = Seq' @stat1.labelled @stat2.labelled

      | Malloc
            loc.fresh :: uniqueref counter
            lhs.labelled = Malloc' @loc.fresh @name @size

      | Free
            loc.fresh :: uniqueref counter
            lhs.labelled = Free' @loc.fresh @ptr

      | RefAssign
            loc.fresh :: uniqueref counter
            lhs.labelled = RefAssign' @loc.fresh @ptr @val

      | Continue
            loc.fresh :: uniqueref counter
            lhs.labelled = Continue' @loc.fresh

      | Break
            loc.fresh :: uniqueref counter
            lhs.labelled = Break' @loc.fresh

{

-- | Helper function necessary for UUAG to automatically handle the counter.
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

run s = wrap_Stat (sem_Stat s) (Inh_Stat 0)

toLabelled :: Stat -> Stat'
toLabelled = labelled_Syn_Stat . run

}
