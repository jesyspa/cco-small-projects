module{AG.LabellingCata}{}{}

{
import AG.AttributeGrammar
}

include "AttributeGrammar.ag"

attr Procs Proc Stat
    chn counter :: {Int}

attr Program
    syn labelled :: {Program'}

attr Proc
    syn labelled :: {Proc'}

attr Procs
    syn labelled use {:} {[]} :: {Procs'}

attr Stat
    syn labelled :: {Stat'}

sem Program
  | Program
        procs.counter = 0
        lhs.labelled = Program' @procs.labelled @stat.labelled

sem Proc
  | Proc
        loc.fresh1 :: uniqueref counter
        loc.fresh2 :: uniqueref counter
        lhs.labelled = Proc' @loc.fresh1 @loc.fresh2 @name @inp @out @stat.labelled

sem Stat
  | Skip
        loc.fresh :: uniqueref counter
        lhs.labelled = Skip' @loc.fresh

  | IfThenElse
        loc.fresh :: uniqueref counter
        lhs.labelled = IfThenElse' @loc.fresh @cond @stat1.labelled @stat2.labelled

  | While
        loc.fresh :: uniqueref counter
        lhs.labelled = While' @loc.fresh @cond @stat.labelled

  | Call
        loc.freshEntry :: uniqueref counter
        loc.freshExit :: uniqueref counter
        lhs.labelled = Call' @loc.freshEntry @loc.freshExit @name @params @out

  | IAssign
        loc.fresh :: uniqueref counter
        lhs.labelled = IAssign' @loc.fresh @name @val

  | BAssign
        loc.fresh :: uniqueref counter
        lhs.labelled = BAssign' @loc.fresh @name @val

  | Seq
        lhs.labelled = Seq' @stat1.labelled @stat2.labelled

  | Malloc
        loc.fresh :: uniqueref counter
        lhs.labelled = Malloc' @loc.fresh @name @size

  | Free
        loc.fresh :: uniqueref counter
        lhs.labelled = Free' @loc.fresh @ptr

  | RefAssign
        loc.fresh :: uniqueref counter
        lhs.labelled = RefAssign' @loc.fresh @ptr @val

  | Continue
        loc.fresh :: uniqueref counter
        lhs.labelled = Continue' @loc.fresh

  | Break
        loc.fresh :: uniqueref counter
        lhs.labelled = Break' @loc.fresh

{

-- | Helper function necessary for UUAG to automatically handle the counter.
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

toLabelled :: Program -> Program'
toLabelled = sem_Program

}
