imports
{
import CCO.Diag.DiagType
import Data.Maybe
import Control.Monad
import Debug.Trace
}

-------------------------------------------------------------------------------
-- Type Checking
-------------------------------------------------------------------------------

type Translation = (Implementation, Implementation)
type MImpl = maybe Implementation
type MTrans = maybe Translation
type Errors = [ TypeError ]

attr Diag Diag_
  syn canRunOn            :: MImpl
  syn canRun              :: MImpl
  syn canCompile          :: MTrans
  syn err use {(++)} {[]} :: Errors

sem Diag_
  | Execute           +err = (++) $ connect @d1.canRunOn @d2.canRun 
  | Compile           +err = (++) $ connect @d1.canRunOn (fst <$> @d2.canCompile)

sem Diag_
  | Program           lhs.canRunOn = Just @l
  | Platform          lhs.canRunOn = Nothing
  | Interpreter       lhs.canRunOn = Just @m
  | Compiler          lhs.canRunOn = Just @m
  | Execute           lhs.canRunOn = @d1.canRunOn
  | Compile           lhs.canRunOn = @d1.canRunOn

sem Diag_
  | Program           lhs.canRun = Nothing
  | Platform          lhs.canRun = Just @m
  | Interpreter       lhs.canRun = Just @l
  | Compiler          lhs.canRun = Just @l1
  | Execute           lhs.canRun = @d2.canRun
  | Compile           lhs.canRun = @d2.canRun

sem Diag_
  | Program           lhs.canCompile = Nothing
  | Platform          lhs.canCompile = Nothing
  | Interpreter       lhs.canCompile = Nothing
  | Compiler          lhs.canCompile = Just (@l1, @l2)
  | Execute           lhs.canCompile = Nothing
  | Compile           lhs.canCompile = @d2.canCompile

-------------------------------------------------------------------------------
-- Utilities
-------------------------------------------------------------------------------

{
type Implementation = String
type Language = String
type Platform = String

connect :: MImpl -> MImpl -> [TypeError]
connect (Just x) (Just y) | x == y = []
connect _ _ = [GenericError ""]

testDiag :: Diag
testDiag = Diag (undefined) (Execute (Diag (undefined) (Program "hello" "haskell")) (Diag (undefined) (Platform "osx")))

simpleDiag = Diag (undefined) (Program "hello" "haskell")

root = sem_Diag testDiag

result = err_Syn_Diag (wrap_Diag root $ Inh_Diag)

typeExp = print (show result)
}
