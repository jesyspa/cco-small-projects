module {CCO.Diag.AG.TypeCheck}{}{
import Data.Maybe
import CCO.SourcePos
import CCO.Diag.TypeError
import CCO.Diag.AG.Base
import CCO.Diag.AG.TypeCheckHelper
}

include "Base.ag"

-------------------------------------------------------------------------------
-- Type Checking
-------------------------------------------------------------------------------

attr Diag Diag_
  syn canRunOn            :: MImpl
  syn canRun              :: MImpl
  syn canCompile          :: MTrans
  syn errMsg              :: Errors
  syn err use {(++)} {[]} :: ErrorsAnn

sem Diag
  | Diag              +err = (++) $ map (TypeErrorAnn @pos) @d.errMsg

sem Diag_
  | Execute           lhs.errMsg = connectExec @d1.canRunOn @d2.canRun
  | Compile           lhs.errMsg = connectComp @d1.canRunOn (fst <$> @d2.canCompile)
  | Program           lhs.errMsg = []
  | Platform          lhs.errMsg = []
  | Interpreter       lhs.errMsg = []
  | Compiler          lhs.errMsg = []

sem Diag_
  | Program           lhs.canRunOn = Just @l
  | Platform          lhs.canRunOn = Nothing
  | Interpreter       lhs.canRunOn = Just @m
  | Compiler          lhs.canRunOn = Just @m
  | Execute           lhs.canRunOn = @d2.canRunOn
  | Compile           lhs.canRunOn = snd <$> @d2.canCompile

sem Diag_
  | Program           lhs.canRun = Nothing
  | Platform          lhs.canRun = Just @m
  | Interpreter       lhs.canRun = Just @l
  | Compiler          lhs.canRun = Nothing
  | Execute           lhs.canRun = @d1.canRun
  | Compile           lhs.canRun = @d1.canRun

sem Diag_
  | Program           lhs.canCompile = Nothing
  | Platform          lhs.canCompile = Nothing
  | Interpreter       lhs.canCompile = Nothing
  | Compiler          lhs.canCompile = Just (@l1, @l2)
  | Execute           lhs.canCompile = @d1.canCompile
  | Compile           lhs.canCompile = @d1.canCompile

-------------------------------------------------------------------------------
-- Utilities
-------------------------------------------------------------------------------

{
-- | Utility function to check if a value is a Nothing and return the appropriate
--  error if this is the case
ifNothing :: Maybe a -> b -> [b]
ifNothing (Just _) _ = []
ifNothing Nothing b = [b]

-- | This functions checks if the two implementations in an execute diagram are
--  consistent.
connectExec :: MImpl -> MImpl -> Errors
connectExec (Just x) (Just y) | x == y = []
                              | otherwise = return $ ExecutionMismatch x y
connectExec a b = ifNothing a CannotBeRun ++ ifNothing b CannotRun

  -- | This functions checks if the two implementations in a compile diagram are
  --  consistent.
connectComp :: MImpl -> MImpl -> Errors
connectComp (Just x) (Just y) | x == y = []
                              | otherwise = return $ CompilerMismatch x y
connectComp a b = ifNothing a CannotBeCompiled ++ ifNothing b CannotCompile

}
