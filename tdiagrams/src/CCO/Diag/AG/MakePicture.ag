imports
{
import CCO.Diag.Figure
import CCO.Picture.AG
}

include "Base.ag"

-- U stands for "use", P stands for "provide"
-- Programs, interpreters, and compilers use running connections
-- Interpreters and platforms provide running connections
-- Programs and interpreters use compilation connections
-- Compilers provide compilation connections
-- Compilation connections involve two points: the connection to use for
-- to start the compilation and the connection to use to end it

type PointPair = (Point, Point)

attr Diag Diag_
    syn runU        :: Point
    syn runP        :: Point
    syn comU        :: PointPair
    syn comP        :: PointPair
    syn code        :: Commands

{
todoPoint :: Point
todoPoint = undefined

todoPointPair :: PointPair
todoPointPair = undefined
}

sem Diag_
    | Program       lhs.runU        = todoPoint
                       .runP        = error "invalid input"
                       .comU        = todoPointPair
                       .comP        = error "invalid input"
    | Platform      lhs.runU        = error "invalid input"
                       .runP        = todoPointPair
                       .comU        = error "invalid input"
                       .comP        = error "invalid input"
    | Interpreter   lhs.runU        = todoPoint
                       .runP        = todoPoint
                       .comU        = todoPointPair
                       .comP        = error "invalid input"
    | Compiler      lhs.runU        = todoPoint
                       .runP        = error "invalid input"
                       .comU        = todoPointPair
                       .comP        = todoPointPair
    | Execute       lhs.runU        = @d2.runU
                       .runP        = translate @loc.d1trans @d1.runP
                       .comU        = @d2.comU
                       .comP        = translate @loc.d1trans @d1.comP
    | Compile       lhs.runU        = translate @loc.d1transR @d1.runU
                       .runP        = translate @loc.d1transR @d1.runP
                       .comU        = translate @loc.d1transR @d1.comU
                       .comP        = translate @loc.d1transR @d1.comP

sem Diag_
    | Program       lhs.code = [ Put (7.5, 0)   $ Line (1, 0) 50
                               , Put (7.5, 0)   $ Line (0, 1) 15
                               , Put (7.5, 15)  $ Line (-1, 2) 7.5
                               , Put (57.5, 15) $ Line (1, 2) 7.5
                               , Put (57.5, 0)  $ Line (0, 1) 15
                               , Put (0, 30)    $ Line (1, 0) 65
                               , Put (7.5, 15)  $ Makebox (50, 15) @p
                               , Put (7.5, 0)   $ Makebox (50, 15) @l
                               ]
    | Platform      lhs.code = [ Put (0, 15)    $ Line (5, -3) 25
                               , Put (25, 0)    $ Line (5, 3) 25
                               , Put (0, 15)    $ Line (0, 1) 15
                               , Put (0, 30)    $ Line (1, 0) 50
                               , Put (50, 30)   $ Line (0, -1) 15
                               , Put (0, 15)    $ MakeBox (50, 15) @m
                               ]
    | Interpreter   lhs.code = [ Put (0, 0)     $ Framebox (50, 30)
                               , Put (0, 20)    $ Makebox (50, 10) @i
                               , Put (0, 10)    $ Makebox (50, 10) @l
                               , Put (0, 00)    $ Makebox (50, 10) @m
                               ]
    | Compiler      lhs.code = [
                               , Put (50,0)    $ Line (0,1)  20
                               , Put (50,20)   $ Line (-1,0) 50
                               , Put (0,20)    $ Line (0,1) 10
                               , Put (0,30)    $ Line (1,0) 150
                               , Put (150,30)  $ Line (0,-1) 10
                               , Put (150,20)  $ Line (-1,0) 50
                               , Put (100,20)  $ Line (0,-1) 20
                               , Put (100,0)   $ Line (-1,0) 50
                               , Put (0,20)    $ Makebox (50,10) @l1
                               , Put (50,20)   $ Makebox (50,10) "$\\longrightarrow$"
                               , Put (100,20)  $ Makebox (50,10) @l2
                               , Put (50,10)   $ Makebox (50,10) @c
                               , Put (50,0)    $ Makebox (50,10) @m
                               ]
    | Execute       lhs.code = map (translateCmd @loc.d1trans) @d1.code ++ @d2.code
                    loc.d1trans = @d2.runP |-| @d1.runU
    | Compile       lhs.code = map (translateCmd @loc.d1transL) @d1.code ++ @d2.code ++ map (translateCmd @loc.d1transR) @d1.code
                    loc.d1transL = fst @d1.comU |-| fst @d2.comP
                    loc.d1transR = snd @d1.comU |-| snd @d2.comP


{
translateCmd :: Point -> Command -> Command
translateCmd p (Put pos obj) = Put (translate pos) obj
}

