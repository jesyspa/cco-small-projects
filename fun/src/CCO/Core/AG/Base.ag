module {CCO.Core.AG.Base}{}{}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

data Mod
  | Mod    main  :: Exp
           binds :: BindL

data Ref
  | Glob   offset     :: {Int}
  | Loc    levdiff    :: {Int}
           offset     :: {Int}
  -- A reference to the tag of some variable.
  | Tag    ref        :: Ref
  -- A reference to a field of some variable.
  | Field  ref        :: Ref
           offset     :: {Int}

type RefL = [Ref]

data SExp
  | Int    i :: {Int}
  | Var    x :: Ref

type SExpL = [SExp]

data Exp
  | SExp   sexp :: SExp
  | Lam    args :: RefL
           body :: Exp
  | App    func :: Exp
           args :: SExpL
  | Prim   func :: {String}
           args :: SExpL
  | Node   tag  :: {Int}
           args :: SExpL
  | Case   sexp :: SExp
           alts :: ExpL
  | Let    bind :: Bind
           body :: Exp
  -- A tail call annotation.
  | Tail   body :: Exp
  -- A "force evaluation" annotation.
  | Eval   body :: Exp
  | Dbg    info :: {String}

type ExpL = [Exp]

data Bind
  | Bind   x    :: Ref
           xexp :: Exp

type BindL = [Bind]
