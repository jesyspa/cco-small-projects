module {CCO.HM.AG.AnnotateTailCalls}{}{}
{
import CCO.HM.AG.BaseHelpers
import CCO.HM.AG.ANormal
import CCO.HM.Context
import qualified CCO.Core.AG.Base as C
}

include "ANormal.ag"

attr ATm AExp
  inh isTail :: {Bool}

attr AVal AVals ATm AExp
  syn code :: self

sem AExp
  | AVal   +code           = maybeMkTail @lhs.isTail
  | AApp   e  .isTail      = False
           +code           = maybeMkTail @lhs.isTail
  | AAlloc +code           = maybeMkTail @lhs.isTail
  | APrim  +code           = maybeMkTail @lhs.isTail
  | ALam   t  .isTail      = True
  | AForce e  .isTail      = False
           +code           = maybeMkTail @lhs.isTail

sem ATm
  | AExp   e  .isTail      = True
  | ALet   e  .isTail      = False
           t  .isTail      = True
  | AIf    t1 .isTail      = True
           t2 .isTail      = True

{
maybeMkTail :: Bool -> AExp -> AExp
maybeMkTail True = ATail
maybeMkTail False = id
}
