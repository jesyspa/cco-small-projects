module{CCO.HM.AG.Sanitize}{}{}
imports
{
import CCO.HM.AG.BaseHelpers
import CCO.HM.AG.Base
import CCO.HM.Table
import Data.Maybe
import Data.List
}

include "Base.ag"

attr Tm_ Tm
  inh context :: {Table}
  chn counter :: Int
  syn freevars use {`union`} {[]} :: {[Var]}
  syn locals use {++} {[]} :: {Table}

attr Tm Tm_
  syn code :: self

sem Tm
  | Tm    lhs.code      = Tm @pos @t.code

sem Tm_
  | Nat   lhs.code      = Nat @i
  | Var   loc.result    = searchTable @lhs.context @x
          lhs.code      = Var $ fst @loc.result
          lhs.freevars  = snd @loc.result
  | Lam   loc.num :: uniqueref counter
          t1 .context   = @loc.locals ++ @lhs.context
          loc.fvar      = freshen @x @loc.num
          lhs.code      = Lam @loc.fvar @t1.code
          loc.locals    = newVar @x @loc.fvar @t1.locals
          lhs.locals    = emptyTable
  | App   lhs.code      = App @t1.code @t2.code
  | Let   loc.num :: uniqueref counter
          loc.fvar      = freshen @x @loc.num
          lhs.code      = Let @loc.fvar @t1.code @t2.code
          lhs.locals    = newVar @x @loc.fvar @t2.locals
  | If    lhs.code      = If @c.code @t1.code @t2.code
          lhs.locals    = @c.locals
          t1 . context  = @t1.locals ++ @lhs.context
          t2 . context  = @t2.locals ++ @lhs.context
  | Prim  loc.num       = @lhs.counter
          lhs.counter   = @loc.num + length @args
          loc.args'     = map (searchTable @lhs.context) @args
          lhs.code      = Prim @op (map fst @loc.args')
          lhs.freevars  = concatMap snd @loc.args'

{
freshen :: Var -> Int -> Var
freshen x i = "$u_" ++ show i ++ "_" ++ x

nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)
}


