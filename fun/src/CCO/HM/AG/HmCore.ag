module {CCO.HM.AG.HmCore}{}{}
{
import CCO.HM.AG.BaseHelpers
import CCO.HM.AG.ANormal
import CCO.HM.Context
import qualified CCO.Core.AG.Base as C
}

include "ANormal.ag"

attr ATm AExp AVal
  inh context :: {Context}

attr AVal
  syn code :: {C.SExp}

attr ATm AExp
  syn code :: {C.Exp}

attr ATm
  syn bindings use {++} {[]} :: {[(Var, C.Bind)]}

sem AVal
  | ANat lhs.code     = C.Int @i
  | AVar lhs.code     = C.Var $ resolve @x @lhs.context

-- The way bindings are looked up doesn't work right now.

sem AExp
  | AVal lhs.code     = C.SExp @v.code
  | AApp lhs.code     = C.App @e.code [@v.code]
  | ALam lhs.code     = undefined
         lhs.bindings = []

sem ATm
  | ALet lhs.code     = @t.code
         t  .context  = push @x @lhs.context
         lhs.bindings = [(@x, C.Bind (resolve @x @lhs.context) @e.code)] ++ @t.bindings

