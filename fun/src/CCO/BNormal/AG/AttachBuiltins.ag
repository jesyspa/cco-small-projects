module{CCO.BNormal.AG.AttachBuiltins}{}{}
imports
{
import CCO.BNormal.AG.BNormal
import CCO.BNormal.AG.BNormalUtils
import CCO.BNormal.Builtins
import Data.List
}

include "BNormal.ag"

-- Addition of built-in features to the code.
--
-- We could simply attach all built-in functions to every output, but that seems wasteful.  Instead, we determine what
-- features are used (syntactically) and then add those.

attr BTm BBind BExp BVal BVals Binding Bindings
  -- The free variables of a piece.  Really, we only care about free variables that are uses of built-in functions, but
  -- it is simpler to consider all the free variables.
  --
  -- (The real reason is that when this part was designed, there was no way to tell whether something is a use of a
  -- built-in or not simply by the variable name.)
  syn freevars use {`union`} {[]} :: {[Var]}
  -- A copy of the code.
  syn code :: self

attr BRoot
  -- The tree, now with variables bound.
  syn code :: self

sem BRoot
  | BRoot   lhs.code      = BRoot $ extendBind (filter (flip elem @b.freevars . getName) builtins) @b.code

sem BVal
  | BVar    lhs.freevars  = [@x]

sem BExp
  | BApp    lhs.freevars  = nub [@x1, @x2]
  | BLam    +freevars     = filter (@x/=)

sem BTm
  | BIf     +freevars     = union [@x]

sem BBind
  | BBind   +freevars     = flip (\\) $ fmap getName @es.code

{
-- | Get the name that a binding binds.
getName :: Binding -> Var
getName (Binding x _ _) = x
}

