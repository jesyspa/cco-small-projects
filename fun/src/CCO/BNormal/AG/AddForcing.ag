module{CCO.BNormal.AG.AddForcing}{}{}
imports
{
import CCO.HM.Base (Var)
import CCO.BNormal.AG.BNormal
import CCO.BNormal.AG.BNormalUtils
}

include "BNormal.ag"

-- Add, where necessary, instructions to force certain terms.

attr BRoot BTm BBind BExp BVal BVals Binding Bindings
  -- The resulting code.
  syn code :: self

attr BTm BBind BExp BVal BVals Binding Bindings
  -- A counter to allow us to generate fresh variable names.
  chn counter :: Int

attr BExp BTm BBind
  -- Indicate whether a value will be forced in this context.
  --
  -- The body of a lambda is forced, since if a lambda is evaluated, its body should be as well.
  -- The bound term in a let binding is not evaluated, since evaluating the let-binding doesn't necessarily evaluate it.
  inh forced :: {Bool}

attr BExp BTm
  -- A list of newly-generated bindings.  This is necessary to be able to generate free variables, which are then bound
  -- when it is convenient.
  syn bindings use {++} {[]} :: {Bindings}

sem BRoot
  | BRoot   b  .forced    = True
            b  .counter   = 0

sem BExp
  | BVal    +code         = maybeForce @lhs.forced
  | BApp    loc.num :: uniqueref counter
            loc.fvar      = forcedVar @loc.num
            lhs.code      = BApp @loc.fvar @x2
            lhs.bindings  = [(@loc.fvar, BForce $ BVal $ BVar @x1)]
            +code         = maybeForce @lhs.forced
  | BLam    b  .forced    = True
  | BPrim   loc.num       = @lhs.counter
            lhs.counter   = @loc.num + length @vs.code
            loc.args'     = zip (map forcedVar [@loc.num..]) @vs.code
            lhs.code      = BPrim @op $ map (BVar . fst) @loc.args'
            lhs.bindings  = map (\(v, v') -> (v, BForce $ BVal v')) @loc.args'
  | BWrap   b  .forced    = True

sem BTm
  | BIf     loc.num :: uniqueref counter
            loc.fvar      = forcedVar @loc.num
            lhs.code      = BIf @loc.fvar @b1.code @b2.code
            lhs.bindings  = [(@loc.fvar, BForce $ BVal $ BVar @x)]

sem BBind
  | BBind   +code         = extendBind @t.bindings

sem Binding
  | Tuple   x2 .forced    = False


{
-- | Get a unique identifier based on an integer.
forcedVar :: Int -> Var
forcedVar i = "$f_" ++ show i

-- | Based on a Bool, possibly force the expression.
maybeForce :: Bool -> BExp -> BExp
maybeForce True = BForce
maybeForce False = id

-- | Helper function necessary for UUAG to automatically handle the counter.
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)
}
